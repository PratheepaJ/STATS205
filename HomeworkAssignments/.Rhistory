df.sunspot= data.frame(x, y)
plot.with.diff.span.sunspot = function(sp, col){
fit = supsmu(df.sunspot$x, df.sunspot$y, span = sp)
dfi = data.frame(x = fit$x, fit.span = fit$y)
p = ggplot() +
geom_point(data = df.sunspot, aes(x = x, y = y)) +
geom_line(data = dfi,
aes(x = x, y = fit.span), color = col) +
ggtitle(paste0("Span is ", sp)) +
theme(plot.title = element_text(hjust = 0.5))
return(p)
}
plot.with.diff.span.sunspot(.05, col.span[1])
plot.with.diff.span.sunspot(.2, col.span[2])
plot.with.diff.span.sunspot(.01, col.span[3])
forensic.data = read.table("forensic_glass_data_W2006.dat", header = TRUE)
head(forensic.data)
library(dplyr)
Y = select(forensic.data, RI)
x = select(forensic.data, Al)
library(np)
Y = Y[,1]
x = x[,1]
kernel.fit = npreg(x, Y, ckertype="epanechnikov", bwmethod = "cv.ls")
kernel.fit
library(waveslim)
data("sunspots")
n = 2^9#512
x = (seq(1, n, by =1)-1)/n
y = sunspots[1:512]
dw.fit =mra(y, method="dwt", wf="haar", J=5)
f4 = dw.fit[[6]]
f5 = dw.fit[[6]] + dw.fit[[5]]
f6 = dw.fit[[6]] + dw.fit[[5]] + dw.fit[[4]] + dw.fit[[3]] + dw.fit[[2]]
df = data.frame(x = x, y = y, f4 = f4, f5 = f5, f6 = f6)
ggplot() + geom_point(data = df, aes(x = x, y = y)) + geom_line(data = df ,aes(x = x, y = f4), color = "blue") + geom_line(data = df,aes(x = x, y = f5), color = "red") + geom_line(data = df,aes(x = x, y = f6), color = "green")
f4 = dw.fit[[6]]
f5 = dw.fit[[6]] + dw.fit[[5]]
f6 = dw.fit[[6]] + dw.fit[[5]] + dw.fit[[4]]
df = data.frame(x = x, y = y, f4 = f4, f5 = f5, f6 = f6)
ggplot() + geom_point(data = df, aes(x = x, y = y)) + geom_line(data = df ,aes(x = x, y = f4), color = "blue") + geom_line(data = df,aes(x = x, y = f5), color = "red") + geom_line(data = df,aes(x = x, y = f6), color = "green")
head(forensic.data)
kernel.fit = npreg(x, Y, ckertype="epanechnikov", bwmethod = "cv.ls")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(datasets)
data(cars)
head(cars)
library(RColorBrewer)
library(wesanderson)
library(ggplot2)
col.span = c(wes_palette("Cavalcanti1", n = 5), wes_palette("Darjeeling1", n = 5))
plot.with.diff.span = function(sp, col){
fit = supsmu(cars$speed, cars$dist, span = sp)
dfi = data.frame(x = fit$x, fit.span = fit$y)
p = ggplot() +
geom_point(data = cars, aes(x = speed, y = dist)) +
geom_line(data = dfi,
aes(x = x, y = fit.span), color = col) +
ggtitle(paste0("Span is ", sp)) +
theme(plot.title = element_text(hjust = 0.5))
return(p)
}
plot.with.diff.span(.05, col.span[1])
plot.with.diff.span(.2, col.span[2])
plot.with.diff.span(.5, col.span[3])
plot.with.diff.span(.2, col.span[4])
library(NSM3)
Friedman.fit.cv = supsmu(cars$speed,
cars$dist, span = "cv")
df = data.frame(speed.x = Friedman.fit.cv$x,
Friedman.fit.cv = Friedman.fit.cv$y)
library(dplyr)
library(ggplot2)
p = ggplot() +
geom_point(data = cars, aes(x = speed, y = dist)) +
geom_line(data = df,
aes(x = speed.x, y = Friedman.fit.cv), color = "red")
plot.with.diff.span(.2, col.span[4]) +
geom_line(data = df, aes(x = speed.x, y = Friedman.fit.cv), color = "red") + ggtitle("")
data("sunspots")
x = c(1:length(sunspots))
y = sunspots
col.span = c(wes_palette("Cavalcanti1", n = 5), wes_palette("Darjeeling1", n = 5))
df.sunspot= data.frame(x, y)
plot.with.diff.span.sunspot = function(sp, col){
fit = supsmu(df.sunspot$x, df.sunspot$y, span = sp)
dfi = data.frame(x = fit$x, fit.span = fit$y)
p = ggplot() +
geom_point(data = df.sunspot, aes(x = x, y = y)) +
geom_line(data = dfi,
aes(x = x, y = fit.span), color = col) +
ggtitle(paste0("Span is ", sp)) +
theme(plot.title = element_text(hjust = 0.5))
return(p)
}
plot.with.diff.span.sunspot(.05, col.span[1])
plot.with.diff.span.sunspot(.2, col.span[2])
plot.with.diff.span.sunspot(.01, col.span[3])
forensic.data = read.table("forensic_glass_data_W2006.dat", header = TRUE)
head(forensic.data)
library(dplyr)
Y = select(forensic.data, RI)
x = select(forensic.data, Al)
library(np)
Y = Y[,1]
x = x[,1]
kernel.fit = npreg(x, Y, ckertype="epanechnikov", bwmethod = "cv.ls")
kernel.fit
summary(kernel.fit)
2.5^2
df  = data.frame(x = x, y = Y)
resample.data = function(df) {
sample.rows = sample(1:nrow(df), replace = TRUE)
return(df[sample.rows,])
}
npr.nox.on.E = function(df.star) {
bw = npregbw(y ~ x, data = df.star)
fit = npreg(bw)
return(fit)
}
evaluation.points = seq((min(ethanol.df$E) -.1), (max(ethanol.df$E)+.1), by =.01)
evaluation.points = seq((min(df$x) -.1), (max(df$x)+.1), by =.01)
eval.npr = function(npr) {
return(predict(npr,
exdat = evaluation.points))
}
npr.cis = function(B,alpha, df, obs.curve) {
tboot= replicate(B, eval.npr(npr.nox.on.E(resample.data(df))))     low.quantiles = apply(tboot, 1, quantile, probs = alpha/2)
npr.cis = function(B,alpha, df, obs.curve) {
tboot= replicate(B, eval.npr(npr.nox.on.E(resample.data(df))))
low.quantiles = apply(tboot, 1, quantile, probs = alpha/2)
high.quantiles = apply(tboot, 1, quantile, probs = (1-alpha/2))
low.cis = 2*obs.curve - high.quantiles
high.cis = 2*obs.curve - low.quantiles
cis = rbind(low.cis, high.cis)
return(list(cis=cis, tboot= t(tboot)))
}
obs.curve
obs.curve = eval.npr(kernel.fit)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(datasets)
data(cars)
head(cars)
library(RColorBrewer)
library(wesanderson)
library(ggplot2)
col.span = c(wes_palette("Cavalcanti1", n = 5), wes_palette("Darjeeling1", n = 5))
plot.with.diff.span = function(sp, col){
fit = supsmu(cars$speed, cars$dist, span = sp)
dfi = data.frame(x = fit$x, fit.span = fit$y)
p = ggplot() +
geom_point(data = cars, aes(x = speed, y = dist)) +
geom_line(data = dfi,
aes(x = x, y = fit.span), color = col) +
ggtitle(paste0("Span is ", sp)) +
theme(plot.title = element_text(hjust = 0.5))
return(p)
}
plot.with.diff.span(.05, col.span[1])
plot.with.diff.span(.2, col.span[2])
plot.with.diff.span(.5, col.span[3])
plot.with.diff.span(.2, col.span[4])
library(NSM3)
Friedman.fit.cv = supsmu(cars$speed,
cars$dist, span = "cv")
df = data.frame(speed.x = Friedman.fit.cv$x,
Friedman.fit.cv = Friedman.fit.cv$y)
library(dplyr)
library(ggplot2)
p = ggplot() +
geom_point(data = cars, aes(x = speed, y = dist)) +
geom_line(data = df,
aes(x = speed.x, y = Friedman.fit.cv), color = "red")
plot.with.diff.span(.2, col.span[4]) +
geom_line(data = df, aes(x = speed.x, y = Friedman.fit.cv), color = "red") + ggtitle("")
data("sunspots")
x = c(1:length(sunspots))
y = sunspots
col.span = c(wes_palette("Cavalcanti1", n = 5), wes_palette("Darjeeling1", n = 5))
df.sunspot= data.frame(x, y)
plot.with.diff.span.sunspot = function(sp, col){
fit = supsmu(df.sunspot$x, df.sunspot$y, span = sp)
dfi = data.frame(x = fit$x, fit.span = fit$y)
p = ggplot() +
geom_point(data = df.sunspot, aes(x = x, y = y)) +
geom_line(data = dfi,
aes(x = x, y = fit.span), color = col) +
ggtitle(paste0("Span is ", sp)) +
theme(plot.title = element_text(hjust = 0.5))
return(p)
}
plot.with.diff.span.sunspot(.05, col.span[1])
plot.with.diff.span.sunspot(.2, col.span[2])
plot.with.diff.span.sunspot(.01, col.span[3])
forensic.data = read.table("forensic_glass_data_W2006.dat", header = TRUE)
head(forensic.data)
library(dplyr)
Y = select(forensic.data, RI)
x = select(forensic.data, Al)
library(np)
Y = Y[,1]
x = x[,1]
kernel.fit = npreg(x, Y, ckertype="epanechnikov", bwmethod = "cv.ls")
summary(kernel.fit)
df  = data.frame(x = x, y = Y)
resample.data = function(df) {
sample.rows = sample(1:nrow(df), replace = TRUE)
return(df[sample.rows,])
}
npr.nox.on.E = function(df.star) {
fit = npreg(df.star$x, df.star$y, ckertype="epanechnikov", bwmethod = "cv.ls")
return(fit)
}
evaluation.points = seq((min(df$x) -.1), (max(df$x)+.1), by =.01)
eval.npr = function(npr) {
return(predict(npr,
exdat = evaluation.points))
}
npr.cis = function(B,alpha, df, obs.curve) {
tboot= replicate(B, eval.npr(npr.nox.on.E(resample.data(df))))
low.quantiles = apply(tboot, 1, quantile, probs = alpha/2)
high.quantiles = apply(tboot, 1, quantile, probs = (1-alpha/2))
low.cis = 2*obs.curve - high.quantiles
high.cis = 2*obs.curve - low.quantiles
cis = rbind(low.cis, high.cis)
return(list(cis=cis, tboot= t(tboot)))
}
obs.curve = eval.npr(kernel.fit)
ethanol.npr.cis = npr.cis(B = 100, alpha = 0.05,
df = df, obs.curve = obs.curve)
npr.cis.eval = ethanol.npr.cis
df.plot.ci = data.frame(x = evaluation.points, obs.curve = obs.curve, low.cis = npr.cis.eval$cis[1,], upper.cis = npr.cis.eval$cis[2,])
ggplot() +
geom_point(data = df, aes(x = x, y = y)) +
geom_line(data = df.plot.ci, aes(x = evaluation.points, y = low.cis), color = "red", linetype = "dashed", size = 1)
p + geom_line(data = df.plot.ci, aes(x = evaluation.points, y = upper.cis), color = "red", linetype = "dashed", size = 1) +
geom_line(data = df.plot.ci, aes(x = evaluation.points, y = obs.curve), color = "blue", size = 1)
npr.on.obs.data = npr.nox.on.E(df)
obs.curve = eval.npr(npr.on.obs.data)
npr.cis.eval = npr.cis(B = 100, alpha = 0.05,
df = df, obs.curve = obs.curve)
df.plot.ci = data.frame(x = evaluation.points, obs.curve = obs.curve, low.cis = npr.cis.eval$cis[1,], upper.cis = npr.cis.eval$cis[2,])
p = ggplot() +
geom_point(data = df, aes(x = x, y = y)) +
geom_line(data = df.plot.ci, aes(x = evaluation.points, y = low.cis), color = "red", linetype = "dashed", size = 1)
p + geom_line(data = df.plot.ci, aes(x = evaluation.points, y = upper.cis), color = "red", linetype = "dashed", size = 1) +
geom_line(data = df.plot.ci, aes(x = evaluation.points, y = obs.curve), color = "blue", size = 1)
npreg(df$x, df$y ckertype="epanechnikov", bwmethod = "cv.ls", regtype="ll")
npreg(df$x, df$y, ckertype="epanechnikov", bwmethod = "cv.ls", regtype="ll")
spline.fit = smooth.spline(df$x, df$y, cv = TRUE)
spline.fit = smooth.spline(df$x, df$y, cv = FALSE) # using generalizedâ€™ cross-validation
summary(spline.fit)
spline.fit
#Regression
library(HoRM)
rgr = regressogram(x, Y, 5, x.lab = "A1", y.lab = "RI", main = "AI and RI Forensic Data Metric")
rgr$data
head(rgr$data)
rm(list=)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(datasets)
data(cars)
head(cars)
library(RColorBrewer)
library(wesanderson)
library(ggplot2)
col.span = c(wes_palette("Cavalcanti1", n = 5), wes_palette("Darjeeling1", n = 5))
plot.with.diff.span = function(sp, col){
fit = supsmu(cars$speed, cars$dist, span = sp)
dfi = data.frame(x = fit$x, fit.span = fit$y)
p = ggplot() +
geom_point(data = cars, aes(x = speed, y = dist)) +
geom_line(data = dfi,
aes(x = x, y = fit.span), color = col) +
ggtitle(paste0("Span is ", sp)) +
theme(plot.title = element_text(hjust = 0.5))
return(p)
}
plot.with.diff.span(.05, col.span[1])
plot.with.diff.span(.2, col.span[2])
plot.with.diff.span(.5, col.span[3])
plot.with.diff.span(.2, col.span[4])
library(NSM3)
Friedman.fit.cv = supsmu(cars$speed,
cars$dist, span = "cv")
df = data.frame(speed.x = Friedman.fit.cv$x,
Friedman.fit.cv = Friedman.fit.cv$y)
library(dplyr)
library(ggplot2)
p = ggplot() +
geom_point(data = cars, aes(x = speed, y = dist)) +
geom_line(data = df,
aes(x = speed.x, y = Friedman.fit.cv), color = "red")
plot.with.diff.span(.2, col.span[4]) +
geom_line(data = df, aes(x = speed.x, y = Friedman.fit.cv), color = "red") + ggtitle("")
data("sunspots")
x = c(1:length(sunspots))
y = sunspots
col.span = c(wes_palette("Cavalcanti1", n = 5), wes_palette("Darjeeling1", n = 5))
df.sunspot= data.frame(x, y)
plot.with.diff.span.sunspot = function(sp, col){
fit = supsmu(df.sunspot$x, df.sunspot$y, span = sp)
dfi = data.frame(x = fit$x, fit.span = fit$y)
p = ggplot() +
geom_point(data = df.sunspot, aes(x = x, y = y)) +
geom_line(data = dfi,
aes(x = x, y = fit.span), color = col) +
ggtitle(paste0("Span is ", sp)) +
theme(plot.title = element_text(hjust = 0.5))
return(p)
}
plot.with.diff.span.sunspot(.05, col.span[1])
plot.with.diff.span.sunspot(.2, col.span[2])
plot.with.diff.span.sunspot(.01, col.span[3])
forensic.data = read.table("forensic_glass_data_W2006.dat", header = TRUE)
head(forensic.data)
library(dplyr)
Y = select(forensic.data, RI)
x = select(forensic.data, Al)
df  = data.frame(x = x, y = Y)
bin.grid = seq(5, 15)
library(HoRM)
reg.fit = regressogram(df$x, df$y, nbins = bin.grid[i])
reg.fit = list()
for(i in 1:length(bin.grid)){
reg.fit[[i]] = regressogram(df$x, df$y, nbins = bin.grid[i])
}
df$x
library(dplyr)
Y = select(forensic.data, RI)
x = select(forensic.data, Al)
df  = data.frame(x = x, y = Y)
bin.grid = seq(5, 15)
library(HoRM)
reg.fit = list()
for(i in 1:length(bin.grid)){
reg.fit[[i]] = regressogram(df$x, df$y, nbins = bin.grid[i])
}
df$x
df
head(Y)
library(dplyr)
Y = select(forensic.data, RI)
x = select(forensic.data, Al)
Y = Y[,1]
x = x[,1]
df  = data.frame(x = x, y = Y)
bin.grid = seq(5, 15)
library(HoRM)
reg.fit = list()
for(i in 1:length(bin.grid)){
reg.fit[[i]] = regressogram(df$x, df$y, nbins = bin.grid[i])
}
head(reg.fit[[1]]$data)
head(df)
head(reg.fit[[2]]$data)
head(df[sort(df$x, decreasing = FALSE),])
head(df[order(df$x, decreasing = FALSE),])
head(reg.fit[[2]]$data)
df.order.x = df[order(df$x, decreasing = FALSE), ]
df.order.x = df[order(df$x, decreasing = FALSE), ]
bin.grid = seq(5, 15)
library(HoRM)
reg.fit = list()
for(i in 1:length(bin.grid)){
reg.fit[[i]] = regressogram(df.order.x$x, df.order.x$y, nbins = bin.grid[i])
}
2^2
head(reg.fit[[1]]$data[,"y"])
sum(df.order.x$y - reg.fit[[1]]$data[,"y"])
sum((df.order.x$y - reg.fit[[1]]$data[,"y"])^2)
head(df.order.x$y - reg.fit[[1]]$data[,"y"])
df.order.x$y
regressogram
i=1
xyx = data.frame(y = reg.fit[[i]]$data[,"y"], z = reg.fit[[i]]$data[,"z"])
xyz
reg.fit[[i]]$data[,"y"]
reg.fit[[i]]$data[,"z"]
xyz = data.frame(y = reg.fit[[i]]$data[,"y"], z = reg.fit[[i]]$data[,"z"])
MEANS <- c(by(xyz$y, xyz$z, FUN = mean))
head(xyz.coords(MEANS))
MEANS
x.seq = seq(min(df.order.x$x), max(df.order.x$x), length = bin.grid[i] + 1)
x.seq
compute.aMSE = function(nbins, df){# df should be ordered by x variable
nbins = nbins
xmin = min(df$x)
xmax = max(df$x)
binWidth = (xmax - xmin) / nbins
errors = list()
for(i in 0:(nbins-1)){
binStart = xmin + i*binWidth
binEnd = xmin + i*binWidth + binWidth
yValues = list()
binX = list()
counter = 0
for(j in df$x[1:length(df$x)]){
if (j > binStart && j < binEnd){
yValues = append(yValues, df$y[counter])
binX = append(binX, j)
}
counter = counter + 1
}
average = Reduce("+", yValues) / length(yValues)
for(j in binX){
errors = append(errors, (average - df$y[which(df$x == j)])^2)
}
}
aMSE = Reduce("+", errors)/(length(df$x)-1)##n-1
return(aMSE)
}
compute.aMSE(12, df.order.x)
compute.aMSE(10, df.order.x)
compute.aMSE(13, df.order.x)
aMSE = list(as.list(bin.grid), function(x){
compute.aMSE(x, df.order.x)
})
aMSE = unlist(aMSE)
plot(x = bin.grid, y = aMSE)
bin.grid
aMSE
df.order.x = df[order(df$x, decreasing = FALSE), ]
bin.grid = seq(5, 15)
library(HoRM)
reg.fit = list()
for(i in 1:length(bin.grid)){
reg.fit[[i]] = regressogram(df.order.x$x, df.order.x$y, nbins = bin.grid[i])
}
compute.aMSE = function(nbins, df){# df should be ordered by x variable
nbins = nbins
xmin = min(df$x)
xmax = max(df$x)
binWidth = (xmax - xmin) / nbins
errors = list()
for(i in 0:(nbins-1)){
binStart = xmin + i*binWidth
binEnd = xmin + i*binWidth + binWidth
yValues = list()
binX = list()
counter = 0
for(j in df$x[1:length(df$x)]){
if (j > binStart && j < binEnd){
yValues = append(yValues, df$y[counter])
binX = append(binX, j)
}
counter = counter + 1
}
average = Reduce("+", yValues) / length(yValues)
for(j in binX){
errors = append(errors, (average - df$y[which(df$x == j)])^2)
}
}
aMSE = Reduce("+", errors)/(length(df$x)-1)##n-1
return(aMSE)
}
aMSE = list(as.list(bin.grid), function(x){
compute.aMSE(x, df.order.x)
})
aMSE = unlist(aMSE)
plot(x = bin.grid, y = aMSE)
aMSE[[1]]
aMSE[[2]]
df.order.x = df[order(df$x, decreasing = FALSE), ]
bin.grid = seq(1, 15)
library(HoRM)
reg.fit = list()
for(i in 1:length(bin.grid)){
reg.fit[[i]] = regressogram(df.order.x$x, df.order.x$y, nbins = bin.grid[i])
}
compute.aMSE = function(nbins, df){# df should be ordered by x variable
nbins = nbins
xmin = min(df$x)
xmax = max(df$x)
binWidth = (xmax - xmin) / nbins
errors = list()
for(i in 0:(nbins-1)){
binStart = xmin + i*binWidth
binEnd = xmin + i*binWidth + binWidth
yValues = list()
binX = list()
counter = 0
for(j in df$x[1:length(df$x)]){
if (j > binStart && j < binEnd){
yValues = append(yValues, df$y[counter])
binX = append(binX, j)
}
counter = counter + 1
}
average = Reduce("+", yValues) / length(yValues)
for(j in binX){
errors = append(errors, (average - df$y[which(df$x == j)])^2)
}
}
aMSE = Reduce("+", errors)/(length(df$x)-1)##n-1
return(aMSE)
}
aMSE = list(as.list(bin.grid), function(x){
compute.aMSE(x, df.order.x)
})
aMSE = unlist(aMSE)
plot(x = bin.grid, y = aMSE)
length(aMSE)
aMSE[1]
aMSE = lapply(as.list(bin.grid), function(x){
compute.aMSE(x, df.order.x)
})
aMSE = unlist(aMSE)
plot(x = bin.grid, y = aMSE)
plot(x = bin.grid, y = aMSE, type ="l")
aMSE[9]
